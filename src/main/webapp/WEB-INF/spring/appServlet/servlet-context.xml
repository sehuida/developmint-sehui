<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- DB 접속정보를 저장하는 dataSource객체 생성 -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"/>
		<beans:property name="username" value="mint"/>
		<beans:property name="password" value="1234"/>
	</beans:bean>
	
	
	<!-- Mybatis사용 객체 생성  -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<!-- classpath: 는 src/main/resources 까지 -->
		<beans:property name="mapperLocations" value="classpath:/mapper/**/*SQL.xml"/>
		<beans:property name="configLocation" value="classpath:mybatis-config.xml"/>
	</beans:bean>
	<beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSession"/>
	</beans:bean>
	
	
	<!-- JDBCTemplate 객체 생성 -->
	<beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<context:component-scan base-package="kr.or.iei" />
	<context:component-scan base-package="kr.or.share"/>
	<context:component-scan base-package="kr.or.jobSearch"/>
	<context:component-scan base-package="kr.or.admin"/>
	<context:component-scan base-package="kr.or.gosu"/>
	<context:component-scan base-package="kr.or.resume"/>
	<context:component-scan base-package="kr.or.common"/>
	<context:component-scan base-package="kr.or.member" />
	<context:component-scan base-package="kr.or.contest" />
	<context:component-scan base-package="kr.or.notice" />
	<context:component-scan base-package="kr.or.qna" />
	<context:component-scan base-package="kr.or.projectTeam" />
	<context:component-scan base-package="kr.or.comment" />
	<context:component-scan base-package="kr.or.announce" />
	<context:component-scan base-package="kr.or.company" />
	<context:component-scan base-package="kr.or.how" />
	<context:component-scan base-package="kr.or.dm"/>
	
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/>
	</beans:bean>
	
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- 트랜잭션 어노테이션 사용을 위한 선언 -->
	<tx:annotation-driven/>
	<!-- AOP 어노테이션방식사용 선언 -->
	<aop:aspectj-autoproxy/>
	<!-- 예약작업 어노테이션방식 사용 선언 -->
	<task:annotation-driven/>
	
	<beans:bean id="alarm" class="kr.or.common.Alarm"/>
	<websocket:handlers>
		<websocket:mapping handler="alarm" path="/alarm.do"/>
	</websocket:handlers>
	<!-- 웹소켓 전체채팅 객체 생성 
	<beans:bean id="allMemberChat" class="kr.or.member.model.service.AllMemberChat"/>
	 웹소켓 설정 
	 웹소켓 쪽지 객체 생성
	-->
	<!--  
		<websocket:mapping handler="allMemberChat" path="/chat.do"/>
	-->
	<!--  
	<beans:bean id="log" class="kr.or.common.LogTest1"/>
	<beans:bean id="log2" class="kr.or.common.LogTest2"/>
	-->
	<!--  
	 <beans:bean id="beforeTest" class="kr.or.common.BeforeAdvice"/>
	 <beans:bean id="ar" class="kr.or.common.AfterReturningAdvice"/>
	 <beans:bean id="at" class="kr.or.common.AfterThrowingAdvice"/>
	 <beans:bean id="aa" class="kr.or.common.AfterAdvice"/>
	 <beans:bean id="around" class="kr.or.common.AroundAdvice"/>
	 -->
	 
	<!--  
	<aop:config>
		<aop:pointcut expression="execution(* kr.or.member.model.service..*Service.*(..))" id="testPointCut"/>
		<aop:pointcut expression="execution(* kr.or.member.model.service..*Service.selectOneMember(kr.or.member.model.vo.Member))" id="loginPointCut"/>
		  	
		<aop:aspect ref="beforeTest">
			<aop:before method="beforeTest" pointcut-ref="testPointCut"/>
		</aop:aspect>

		<aop:aspect ref="ar">
			<aop:after-returning method="afterReturning" pointcut-ref="loginPointCut" returning="returnObj"/>
		</aop:aspect>
		<aop:aspect ref="at">
			<aop:after-throwing method="afterThrowing" pointcut-ref="loginPointCut" throwing="exceptObj"/>
		</aop:aspect>
		<aop:aspect ref="aa">
			<aop:after method="after" pointcut-ref="loginPointCut"/>
		</aop:aspect>

		<aop:aspect ref="around">
			<aop:around method="arountTest" pointcut-ref="testPointCut"/>
		</aop:aspect>
	</aop:config>
	-->

</beans:beans>
